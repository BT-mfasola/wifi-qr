#!/bin/bash
#
# Lazy boring
# Ubuntu-MM
# Idea from Xaomi 
# Ko Ko Ye <kokoye2007@gmail.com>
# Ubuntu Myanmar LoCo Team
#
WIFIS=''
SSID=''
KEEY=''
PSK=''
HIDDEN=''

#Check root or sudo
if [ "$(id -u)" != "0" ]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi

#check software is install or not
#software=qrencode
#problem=$(dpkg -s $software | grep installed)
#echo "Checking for $software : $problem" > /dev/null 2>&1
#if [ "" == "$problem" ]; then
#     echo "No $software. Setting up $software";
#     sudo apt-get -y install $software;
#fi

main_menu(){

CHOICE=$(zenity --list \
	--title="Wifi and QR Code" \
	--text="Please choose you meny:" \
	--radiolist \
	--width=300 --height=220 \
	--column="Check" --column="Menu" \
	FALSE "Local Wifi to QR Code" \
	FALSE "Wifi QR Code Scan and Connect" \
	FALSE "See license" \
	FALSE "See version")

#Menu g
if [[ "$CHOICE" =~ "Local Wifi to QR Code" ]]; then
	call_wifi_gui	
fi


if [[ "$CHOICE" =~ "Wifi QR Code Scan and Connect" ]]; then
       call_wifi_scan_gui
fi

if [[ "$CHOICE" =~ "See license" ]]; then
	zenity --text-info --title="Wifi QR Copyright" --filename=/usr/share/doc/wifi-qr/copyright
	main_menu
fi

if [[ "$CHOICE" =~ "See version" ]]; then
	zenity --info --icon-name=wifi-qr --title="Wifi QR Version" --no-wrap  --text=" This is wifi-qr version 0.1"
	main_menu
fi
}

#Working DIR
WIFIDIR=/etc/NetworkManager/system-connections
cd "$WIFIDIR"

#GUI
call_wifi_gui(){
files=$(ls -Q)
WIFIS=$(eval zenity --list --column="SSID" --width=300 --height=600  $files)
if [ -z "$WIFIS" ]; then
        zenity --error --text="No Select SSID" --width=200  --title="Wifi and QR Code"
        exit 
else
	call_wifi_pass
	QR_PNG=$(echo $WIFIS | tr -dc '[:alnum:]')
	qrencode -l h -s 14 -o /tmp/$QR_PNG "WIFI:S:$WIFIS;P:$KEEY;$PSSK$H;" 
	xdg-open /tmp/$QR_PNG && rm $_
fi
}

#WIFI Command from terminal
call_wifi_terminal(){
        OLD_IFS=$IFS
        IFS=$'\n'
                for l in $(ls | sort); do
                array[$i]=$l;
                i=$(($i+1));
        done

        i=0
                for m in ${array[@]}
                do
                echo
                echo  "$(( i++ ))) $(basename "$m")"
        done
        IFS=$OLD_IFS

echo ""
echo "please choose wifi ssid"
read -e wifissid 
WIFIS=${array[$wifissid]}
echo $WIFIS
echo -e "\nyou choose SSID is: $WIFIS\n"
call_wifi_pass
qrencode -o - -t UTF8 "WIFI:S:$WIFIS;P:$KEEY;$PSSK$H;"       
echo
}

call_wifi_pass(){
SSID=$(awk -F"=" '/^ssid/ {print $2}' "$WIFIS")
KEEY=$(awk -F"=" '/^psk/ {print $2}' "$WIFIS")
PSK=$(awk -F"=" '/^key-mgmt/ {print $2}' "$WIFIS")
HIDN=$(awk -F"=" '/^hidden/ {print $2}' "$WIFIS")

if [[ "$PSK" == *"wpa"* ]] ; then
		PSSK="T:WPA;" ;
	elif
	[[ "$PSK" == "wep" ]] ; then
		PSSK="T:WEP;" ;
fi
if [[ ! -z "$HIDN" ]]; then
	if [[ "$HIDN" == *"true"* ]]; then
		H="H:true;"
	fi
	else
		H=""
fi
echo ""
echo "SSID:    $WIFIS"
echo "PASS:    $KEEY"
echo "TYPE:    $PSSK"
echo "HIDE:    $H"
echo ""
}

call_wifi_scan(){
# Vars
wifiqrdata=''
# Current directory to var
# tmp data-matrix holder
cwd="/tmp/"
qr_data="$cwd/wifi-qr-scan"
	zbarcam --raw --prescale=320x240 /dev/video0 > $qr_data &

  # Last job running in background eg. zbarcam
  pid=$!

  # Sleep loop until $qr_data file has content
  while [[ ! -s $qr_data ]]
    do
      sleep 1
      # cleanup - add a trap that will remove $qr_data and kill zbarcam
      # if any of the signals - SIGHUP SIGINT SIGTERM it received.
      trap "rm -f $qr_data ; kill -s 9 $pid; exit" SIGHUP SIGINT SIGTERM
  done

  kill -s 9 $pid
  wifiqrdata=$(cat $qr_data)
  rm -f $qr_data

	###
	# Add WIFI QR or ELSE check
	###

  # Append scan results to file
  #echo $wifiqrdata >> $ScanResult
	
 ## Go Go GUI and CLI Mod
	QSSID=$(echo $wifiqrdata | awk -F';' '{print $3}' | cut -d":" -f2)
        QKEES=$(echo $wifiqrdata | awk -F';' '{print $2}' | cut -d":" -f2 | sed 's/^.\(.*\).$/\1/')
        QINFO=$(echo -e "SSID: $QSSID\nPASS: $QKEES")
}

call_wifi_scan_gui(){
 call_wifi_scan
  # Function with QR data
	zenity --question --title="Connect to Wifi" --text="$QINFO" --width=200 --height=120  --icon-name=network-wireless #2>/dev/null
	if [ $? = 0 ]; then
		scan_connect
	else
    		exit
	fi
}

scan_connect(){
		nmcli radio wifi on
		nmcli dev wifi rescan > /dev/null 2>&1
                nmcli dev wifi connect $QSSID password $QKEES  > /dev/null 2>&1
}

#RAW DATA SAMPLE
#"WIFI:S:$WIFIS;P:$KEEY;$PSSK$H;"
#qrencode -o - -t UTF8 "WIFI:S:$WIFIS;P:$KEEY;$PSSK$H;"
#qrencode -l h -s 14 -o /tmp/$QR "WIFI:S:$WIFIS;P:$KEEY;$PSSK$H;" 

	
case $1 in

        [Tt] )
                echo "start using wifi to qr"
			call_wifi_terminal
                ;;
        [Cc] )
                echo "start using wifi to qr"
			call_wifi_gui
                ;;
        [Gg] )
                echo "go go gui";
			main_menu	
                ;;
        [Ss] )
                echo "qr scan";
			call_wifi_scan
			scan_connect
                ;;
        [Qq] )
                echo "qr scan with gui";
			call_wifi_scan_gui  
                ;;
        *) echo -e "\nInvalid input\n
	Please use	t for Terminal
			g for Gui
			s for QR Scan and Connect Wifi
		"
            ;;
esac
